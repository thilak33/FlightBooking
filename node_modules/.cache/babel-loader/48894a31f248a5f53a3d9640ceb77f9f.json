{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\nvar isPrimitive = require('../helpers/isPrimitive');\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\n// whitespace from: https://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\nvar ws = ['\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003', '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028', '\\u2029\\uFEFF'].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar $replace = callBound('String.prototype.replace');\nvar $trim = function (value) {\n  return $replace(value, trimRegex, '');\n};\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-tonumber\n\nmodule.exports = function ToNumber(argument) {\n  var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);\n  if (typeof value === 'symbol') {\n    throw new $TypeError('Cannot convert a Symbol value to a number');\n  }\n  if (typeof value === 'bigint') {\n    throw new $TypeError('Conversion from \\'BigInt\\' to \\'number\\' is not allowed.');\n  }\n  if (typeof value === 'string') {\n    if (isBinary(value)) {\n      return ToNumber($parseInteger($strSlice(value, 2), 2));\n    } else if (isOctal(value)) {\n      return ToNumber($parseInteger($strSlice(value, 2), 8));\n    } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n      return NaN;\n    }\n    var trimmed = $trim(value);\n    if (trimmed !== value) {\n      return ToNumber(trimmed);\n    }\n  }\n  return $Number(value);\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","$Number","$RegExp","$parseInteger","callBound","regexTester","isPrimitive","$strSlice","isBinary","isOctal","isInvalidHexLiteral","nonWS","join","nonWSregex","hasNonWS","ws","trimRegex","RegExp","$replace","$trim","value","ToPrimitive","module","exports","ToNumber","argument","NaN","trimmed"],"sources":["/Users/thilakvoruganti/Desktop/watch/node_modules/es-abstract/2021/ToNumber.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\nvar isPrimitive = require('../helpers/isPrimitive');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\n// whitespace from: https://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\nvar ws = [\n\t'\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003',\n\t'\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028',\n\t'\\u2029\\uFEFF'\n].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar $replace = callBound('String.prototype.replace');\nvar $trim = function (value) {\n\treturn $replace(value, trimRegex, '');\n};\n\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-tonumber\n\nmodule.exports = function ToNumber(argument) {\n\tvar value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);\n\tif (typeof value === 'symbol') {\n\t\tthrow new $TypeError('Cannot convert a Symbol value to a number');\n\t}\n\tif (typeof value === 'bigint') {\n\t\tthrow new $TypeError('Conversion from \\'BigInt\\' to \\'number\\' is not allowed.');\n\t}\n\tif (typeof value === 'string') {\n\t\tif (isBinary(value)) {\n\t\t\treturn ToNumber($parseInteger($strSlice(value, 2), 2));\n\t\t} else if (isOctal(value)) {\n\t\t\treturn ToNumber($parseInteger($strSlice(value, 2), 8));\n\t\t} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n\t\t\treturn NaN;\n\t\t}\n\t\tvar trimmed = $trim(value);\n\t\tif (trimmed !== value) {\n\t\t\treturn ToNumber(trimmed);\n\t\t}\n\n\t}\n\treturn $Number(value);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}