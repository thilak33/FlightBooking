{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = childrenHavePropXorChildren;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction childrenHavePropXorChildren(prop) {\n  if (typeof prop !== 'string' && _typeof(prop) !== 'symbol') {\n    throw new TypeError('invalid prop: must be string or symbol');\n  }\n  var validator = function childrenHavePropXorChildrenWithProp(_ref, _, componentName) {\n    var children = _ref.children;\n    var truthyChildrenCount = 0;\n    var propCount = 0;\n    var grandchildrenCount = 0;\n    _react[\"default\"].Children.forEach(children, function (child) {\n      if (!child) {\n        return;\n      }\n      truthyChildrenCount += 1;\n      if (child.props[prop]) {\n        propCount += 1;\n      }\n      if (_react[\"default\"].Children.count(child.props.children)) {\n        grandchildrenCount += 1;\n      }\n    });\n    if (propCount === truthyChildrenCount && grandchildrenCount === 0 || propCount === 0 && grandchildrenCount === truthyChildrenCount || propCount === 0 && grandchildrenCount === 0) {\n      return null;\n    }\n    return new TypeError(\"`\".concat(componentName, \"` requires children to all have prop \\u201C\").concat(prop, \"\\u201D, all have children, or all have neither.\"));\n  };\n  validator.isRequired = validator;\n  return (0, _wrapValidator[\"default\"])(validator, \"childrenHavePropXorChildrenWithProp:\".concat(prop), prop);\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAEe,SAASA,2BAAT,CAAqCC,IAArC,EAA2C;EACxD,IAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BC,QAAOD,IAAP,MAAgB,QAAhD,EAA0D;IACxD,MAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;EACD;EAED,IAAMC,SAAS,GAAG,SAASC,mCAAT,OAA2DC,CAA3D,EAA8DC,aAA9D,EAA6E;IAAA,IAA9BC,QAA8B,QAA9BA,QAA8B;IAC7F,IAAIC,mBAAmB,GAAG,CAA1B;IACA,IAAIC,SAAS,GAAG,CAAhB;IACA,IAAIC,kBAAkB,GAAG,CAAzB;IAEAC,kBAAMC,QAAN,CAAeC,OAAf,CAAuBN,QAAvB,EAAiC,UAACO,KAAD,EAAW;MAC1C,IAAI,CAACA,KAAL,EAAY;QACV;MACD;MAEDN,mBAAmB,IAAI,CAAvB;MAEA,IAAIM,KAAK,CAACC,KAAN,CAAYf,IAAZ,CAAJ,EAAuB;QACrBS,SAAS,IAAI,CAAb;MACD;MAED,IAAIE,kBAAMC,QAAN,CAAeI,KAAf,CAAqBF,KAAK,CAACC,KAAN,CAAYR,QAAjC,CAAJ,EAAgD;QAC9CG,kBAAkB,IAAI,CAAtB;MACD;IACF,CAdD;IAgBA,IACGD,SAAS,KAAKD,mBAAd,IAAqCE,kBAAkB,KAAK,CAA7D,IACID,SAAS,KAAK,CAAd,IAAmBC,kBAAkB,KAAKF,mBAD9C,IAEIC,SAAS,KAAK,CAAd,IAAmBC,kBAAkB,KAAK,CAHhD,EAIE;MACA,OAAO,IAAP;IACD;IAED,OAAO,IAAIR,SAAJ,YAAmBI,aAAnB,wDAA0EN,IAA1E,qDAAP;EACD,CA9BD;EA+BAG,SAAS,CAACc,UAAV,GAAuBd,SAAvB;EAEA,OAAO,+BAAcA,SAAd,gDAAgEH,IAAhE,GAAwEA,IAAxE,CAAP;AACD","names":["childrenHavePropXorChildren","prop","_typeof","TypeError","validator","childrenHavePropXorChildrenWithProp","_","componentName","children","truthyChildrenCount","propCount","grandchildrenCount","React","Children","forEach","child","props","count","isRequired"],"sources":["/Users/thilakvoruganti/Desktop/Flights-app/node_modules/airbnb-prop-types/src/childrenHavePropXorChildren.js"],"sourcesContent":["import React from 'react';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function childrenHavePropXorChildren(prop) {\n  if (typeof prop !== 'string' && typeof prop !== 'symbol') {\n    throw new TypeError('invalid prop: must be string or symbol');\n  }\n\n  const validator = function childrenHavePropXorChildrenWithProp({ children }, _, componentName) {\n    let truthyChildrenCount = 0;\n    let propCount = 0;\n    let grandchildrenCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (!child) {\n        return;\n      }\n\n      truthyChildrenCount += 1;\n\n      if (child.props[prop]) {\n        propCount += 1;\n      }\n\n      if (React.Children.count(child.props.children)) {\n        grandchildrenCount += 1;\n      }\n    });\n\n    if (\n      (propCount === truthyChildrenCount && grandchildrenCount === 0)\n      || (propCount === 0 && grandchildrenCount === truthyChildrenCount)\n      || (propCount === 0 && grandchildrenCount === 0)\n    ) {\n      return null;\n    }\n\n    return new TypeError(`\\`${componentName}\\` requires children to all have prop “${prop}”, all have children, or all have neither.`);\n  };\n  validator.isRequired = validator;\n\n  return wrapValidator(validator, `childrenHavePropXorChildrenWithProp:${prop}`, prop);\n}\n"]},"metadata":{},"sourceType":"script"}