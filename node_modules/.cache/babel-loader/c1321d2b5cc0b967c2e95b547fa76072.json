{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _propTypes = require(\"prop-types\");\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\nvar validator = function numericString(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    rest[_key - 3] = arguments[_key];\n  }\n  var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));\n  if (stringError) {\n    return stringError;\n  }\n  var value = props[propName];\n  var passesRegex = validNumericChars.test(value);\n  if (passesRegex) {\n    return null;\n  }\n  return new TypeError(\"\".concat(componentName, \": prop \\\"\").concat(propName, \"\\\" (value \\\"\").concat(value, \"\\\") must be a numeric string:\\n    - starting with an optional + or -\\n    - that does not have a leading zero\\n    - with an optional decimal part (that contains only one decimal point, if present)\\n    - that otherwise only contains digits (0-9)\\n    - not +-NaN, or +-Infinity\\n  \"));\n};\nvalidator.isRequired = function numericStringRequired(props, propName, componentName) {\n  if (props[propName] == null) {\n    return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" is required\"));\n  }\n  for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    rest[_key2 - 3] = arguments[_key2];\n  }\n  return validator.apply(void 0, [props, propName, componentName].concat(rest));\n};\nvar _default = function _default() {\n  return (0, _wrapValidator[\"default\"])(validator, 'numericString');\n};\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;;;AAEA,IAAMA,iBAAiB,GAAG,iDAA1B;AAEA,IAAMC,SAAS,GAAG,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAAgE;EAChF,IAAIF,KAAK,CAACC,QAAD,CAAL,IAAmB,IAAvB,EAA6B;IAC3B,OAAO,IAAP;EACD;EAH+E,kCAANE,IAAM;IAANA,IAAM;EAAA;EAKhF,IAAMC,WAAW,GAAGC,iCAAOL,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,SAA0CC,IAA1C,EAApB;EACA,IAAIC,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACD;EAED,IAAME,KAAK,GAAGN,KAAK,CAACC,QAAD,CAAnB;EAEA,IAAMM,WAAW,GAAGV,iBAAiB,CAACW,IAAlB,CAAuBF,KAAvB,CAApB;EACA,IAAIC,WAAJ,EAAiB;IACf,OAAO,IAAP;EACD;EAED,OAAO,IAAIE,SAAJ,WAAiBP,aAAjB,sBAAyCD,QAAzC,yBAA8DK,KAA9D,iSAAP;AAOD,CAxBD;AA0BAR,SAAS,CAACY,UAAV,GAAuB,SAASC,qBAAT,CAA+BX,KAA/B,EAAsCC,QAAtC,EAAgDC,aAAhD,EAAwE;EAC7F,IAAIF,KAAK,CAACC,QAAD,CAAL,IAAmB,IAAvB,EAA6B;IAC3B,OAAO,IAAIQ,SAAJ,WAAiBP,aAAjB,eAAmCD,QAAnC,kBAAP;EACD;EAH4F,mCAANE,IAAM;IAANA,IAAM;EAAA;EAI7F,OAAOL,SAAS,MAAT,UAAUE,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,SAA6CC,IAA7C,EAAP;AACD,CALD;eAOe;EAAA,OAAM,+BAAcL,SAAd,EAAyB,eAAzB,CAAN;AAAA,C","names":["validNumericChars","validator","numericString","props","propName","componentName","rest","stringError","string","value","passesRegex","test","TypeError","isRequired","numericStringRequired"],"sources":["/Users/thilakvoruganti/Desktop/Flights-app/node_modules/airbnb-prop-types/src/numericString.js"],"sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nconst validator = function numericString(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  const stringError = string(props, propName, componentName, ...rest);\n  if (stringError) {\n    return stringError;\n  }\n\n  const value = props[propName];\n\n  const passesRegex = validNumericChars.test(value);\n  if (passesRegex) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}: prop \"${propName}\" (value \"${value}\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  `);\n};\n\nvalidator.isRequired = function numericStringRequired(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return new TypeError(`${componentName}: ${propName} is required`);\n  }\n  return validator(props, propName, componentName, ...rest);\n};\n\nexport default () => wrapValidator(validator, 'numericString');\n"]},"metadata":{},"sourceType":"script"}