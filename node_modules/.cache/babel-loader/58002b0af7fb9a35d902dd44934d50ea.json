{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = disallowedIf;\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction disallowedIf(propType, otherPropName, otherPropType) {\n  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {\n    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');\n  }\n  if (typeof otherPropName !== 'string') {\n    throw new TypeError('other prop name must be a string');\n  }\n  if (typeof otherPropType !== 'function') {\n    throw new TypeError('other prop type validator is required');\n  }\n  function disallowedIfRequired(props, propName, componentName) {\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n    var error = propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));\n    if (error) {\n      return error;\n    }\n    if (props[otherPropName] == null) {\n      return null;\n    }\n    var otherError = otherPropType.apply(void 0, [props, otherPropName, componentName].concat(rest));\n    if (otherError) {\n      return null;\n    }\n    return new Error(\"prop \\u201C\".concat(propName, \"\\u201D is disallowed when \\u201C\").concat(otherPropName, \"\\u201D matches the provided validator\"));\n  }\n  var validator = function disallowedIfPropType(props, propName) {\n    if (props[propName] == null) {\n      return null;\n    }\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      rest[_key2 - 2] = arguments[_key2];\n    }\n    return disallowedIfRequired.apply(void 0, [props, propName].concat(rest));\n  };\n  validator.isRequired = disallowedIfRequired;\n  return (0, _wrapValidator[\"default\"])(validator, 'disallowedIf', {\n    propType: propType,\n    otherPropName: otherPropName,\n    otherPropType: otherPropType\n  });\n}","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;AAEe,SAASA,YAAT,CAAsBC,QAAtB,EAAgCC,aAAhC,EAA+CC,aAA/C,EAA8D;EAC3E,IAAI,OAAOF,QAAP,KAAoB,UAApB,IAAkC,OAAOA,QAAQ,CAACG,UAAhB,KAA+B,UAArE,EAAiF;IAC/E,MAAM,IAAIC,SAAJ,CAAc,uFAAd,CAAN;EACD;EAED,IAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAuC;IACrC,MAAM,IAAIG,SAAJ,CAAc,kCAAd,CAAN;EACD;EAED,IAAI,OAAOF,aAAP,KAAyB,UAA7B,EAAyC;IACvC,MAAM,IAAIE,SAAJ,CAAc,uCAAd,CAAN;EACD;EAED,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,QAArC,EAA+CC,aAA/C,EAAuE;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;IACrE,IAAMC,KAAK,GAAGV,QAAQ,CAACG,UAAT,eAAQ,GAAYG,KAAZ,EAAmBC,QAAnB,EAA6BC,aAA7B,SAA+CC,IAA/C,EAAtB;IACA,IAAIC,KAAJ,EAAW;MACT,OAAOA,KAAP;IACD;IAED,IAAIJ,KAAK,CAACL,aAAD,CAAL,IAAwB,IAA5B,EAAkC;MAChC,OAAO,IAAP;IACD;IAED,IAAMU,UAAU,GAAGT,aAAa,MAAb,UAAcI,KAAd,EAAqBL,aAArB,EAAoCO,aAApC,SAAsDC,IAAtD,EAAnB;IACA,IAAIE,UAAJ,EAAgB;MACd,OAAO,IAAP;IACD;IACD,OAAO,IAAIC,KAAJ,sBAAmBL,QAAnB,6CAAoDN,aAApD,2CAAP;EACD;EAED,IAAMY,SAAS,GAAG,SAASC,oBAAT,CAA8BR,KAA9B,EAAqCC,QAArC,EAAwD;IACxE,IAAID,KAAK,CAACC,QAAD,CAAL,IAAmB,IAAvB,EAA6B;MAC3B,OAAO,IAAP;IACD;IAHuE,mCAANE,IAAM;MAANA,IAAM;IAAA;IAIxE,OAAOJ,oBAAoB,MAApB,UAAqBC,KAArB,EAA4BC,QAA5B,SAAyCE,IAAzC,EAAP;EACD,CALD;EAOAI,SAAS,CAACV,UAAV,GAAuBE,oBAAvB;EAEA,OAAO,+BAAcQ,SAAd,EAAyB,cAAzB,EAAyC;IAAEb,QAAQ,EAARA,QAAF;IAAYC,aAAa,EAAbA,aAAZ;IAA2BC,aAAa,EAAbA;EAA3B,CAAzC,CAAP;AACD","names":["disallowedIf","propType","otherPropName","otherPropType","isRequired","TypeError","disallowedIfRequired","props","propName","componentName","rest","error","otherError","Error","validator","disallowedIfPropType"],"sources":["/Users/thilakvoruganti/Desktop/Flights-app/node_modules/airbnb-prop-types/src/disallowedIf.js"],"sourcesContent":["import wrapValidator from './helpers/wrapValidator';\n\nexport default function disallowedIf(propType, otherPropName, otherPropType) {\n  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {\n    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');\n  }\n\n  if (typeof otherPropName !== 'string') {\n    throw new TypeError('other prop name must be a string');\n  }\n\n  if (typeof otherPropType !== 'function') {\n    throw new TypeError('other prop type validator is required');\n  }\n\n  function disallowedIfRequired(props, propName, componentName, ...rest) {\n    const error = propType.isRequired(props, propName, componentName, ...rest);\n    if (error) {\n      return error;\n    }\n\n    if (props[otherPropName] == null) {\n      return null;\n    }\n\n    const otherError = otherPropType(props, otherPropName, componentName, ...rest);\n    if (otherError) {\n      return null;\n    }\n    return new Error(`prop “${propName}” is disallowed when “${otherPropName}” matches the provided validator`);\n  }\n\n  const validator = function disallowedIfPropType(props, propName, ...rest) {\n    if (props[propName] == null) {\n      return null;\n    }\n    return disallowedIfRequired(props, propName, ...rest);\n  };\n\n  validator.isRequired = disallowedIfRequired;\n\n  return wrapValidator(validator, 'disallowedIf', { propType, otherPropName, otherPropType });\n}\n"]},"metadata":{},"sourceType":"script"}